import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store/store';
//import { isSomeAsyncActionsFulfilled, isSomeAsyncActionsPending, isSomeAsyncActionsRejected } from '../helpers';
/* import { getAllArtists } from '../thunks/artists'; */
//import { incrementAsync, otherIncrementAsync } from '../thunks/counter';

//Acá se ingresan los parámetros qué se recibirán desde el backend
export interface ArtistArgs {
    id: string;
    name: string;
    img: string;
    idUsuario: string;
}
export interface ArtistDetailProps {
    eventos: Evento[];
    id: string;
    idUsuario: string;
    img: string;
    name: string;
    descripcion: string;
    usuario: Usuario;
}

export interface Evento {
    artistaId: string;
    description: string;
    duration: number;
    eventosCategorias: EventosCategoria[];
    id: string;
    imagesEvent: string[];
    isActive: boolean;
    lugar: string;
    name: string;
    price: number;
    tiempo: string;
}

export interface EventosCategoria {
    categorias: Categorias;
    idCategoria: string;
    idEvento: string;
}

export interface Categorias {
    id: string;
    name: string;
}

export interface Usuario {
    email: string;
    id: string;
    idPersona: string;
    password: string;
    persona: Persona;
    token: string;
}

export interface Persona {
    city: string;
    country: string;
    id: string;
    lastname: string;
    name: string;
}


export interface ArtistState {
    artists: ArtistArgs[],
    detail: ArtistDetailProps[],
    request: 'idle' | 'loading';
}

const initialState: ArtistState = {
    artists: [],
    detail: [],
    /* Estos estados son para validar el status de las peticiones al backend */
    request: 'idle'
};

/* Se inhabilitan las opciones de redux createAsyncThunk */
// const isActionsPending = isSomeAsyncActionsPending([
//     getAllArtists
// ]);

// const isActionsFulfilled = isSomeAsyncActionsFulfilled([
//     getAllArtists
// ]);

// const isActionsRejected = isSomeAsyncActionsRejected([
//     getAllArtists
// ]);

export const artistSlice = createSlice({
    name: 'artist',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        getAll: (state, action) => {
            state.artists = action.payload;
            state.detail = [];
        },
        getByName: (state, action) => {
            state.artists = action.payload;
            state.detail = [];
        },
        getDetail: (state, action: PayloadAction<ArtistDetailProps[]>) => {
            state.detail = action.payload;
        },
        isLoading: (state, action) => {
            action.payload ? state.request = 'loading' : state.request = 'idle';
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //     builder
    //         .addMatcher(isActionsPending, (state) => {
    //             state.request = 'loading';
    //         })
    //         .addMatcher(isActionsFulfilled, (state, action) => {
    //             state.request = 'idle';
    //             state.status = 'success';
    //         })
    //         .addMatcher(isActionsRejected, (state) => {
    //             state.request = 'idle';
    //             state.status = 'failed';
    //         })
    // }
});

export const { getAll, getByName, getDetail, isLoading } = artistSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectArtist = (state: RootState) => state.artists;

export default artistSlice.reducer;
